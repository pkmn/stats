-ability: [from] EFFECT, [of] POKEMON, [fail], [silent]
-activate: [from] EFFECT, [of] POKEMON, [consumed], [damage], [block] MOVE, [broken]
-clearnegativeboost: [silent], [zeffect]
-copyboost: [from] EFFECT
-curestatus: [from] EFFECT, [silent], [msg]
-cureteam: [from] EFFECT
-damage: [from] EFFECT, [of] POKEMON, [partiallytrapped], [silent]
-end: [from] EFFECT, [of] POKEMON, [partiallytrapped], [silent], [interrupt]
-endability: [from] EFFECT
-enditem: [from] EFFECT, [of] POKEMON, [move] MOVE, [silent], [weaken]
-fail: [from] EFFECT, [of]: POKEMON, [forme], [heavy], [weak], [msg]
-fieldend: [of] POKEMON
-fieldend: [from] EFFECT, [of] POKEMON
-formechange: [from] EFFECT
-heal: [from] EFFECT, [of] POKEMON, [zeffect], [wisher] POKEMON, [silent]
-immune: [from] EFFECT, [ohko]
-invertboost: [from] EFFECT
-item: [from] EFFECT, [of] POKEMON, [identify]
-setboost: [from] EFFECT
-sethp: [from] EFFECT, [silent]
-sideend: [from] EFFECT, [of] POKEMON
-singleturn: [of] POKEMON, [zeffect]
-start: [from] EFFECT, [of] POKEMON, [silent], [upkeep], [fatigue], [zeffect]
-status: [from] EFFECT, [of] POKEMON, [silent]
-swapboost: [from] EFFECT
-transform: [from] EFFECT
-weather: [from] EFFECT, [of] POKEMON, [upkeep]
cant: [of] POKEMON
-boost: [from] EFFECT, [silent], [zeffect]
-unboost: [from] EFFECT, [silent], [zeffect]

-------


[from] = effect ('move: Foo', 'ability: Foo', 'item: Foo')
[of] = source/target Pokemon (maybe not pokemon? TODO)
[consumed]
[damage]
[block] Move
[move] Move
[broken]
[silent]
[zeffect]
[msg]
[partiallytrapped]
[interrupt]
[weaken]
[eat]
[heavy]
[weak]
[forme]
[ohko]
[upkeep]
[fatigue]


("-enditem", source, item.name, '[from] move: Fling');

("-fail", target, "unboost", "Attack", "[from] ability: Hyper Cutter", "[of] " + target);
("-fail", target, "unboost", "Defense", "[from] ability: Big Pecks", "[of] " + target);
("-fail", target, "unboost", "[from] ability: Clear Body", "[of] " + target);
("-fail", target, "unboost", "[from] ability: Full Metal Body", "[of] " + target);
("-fail", target, "unboost", "[from] ability: White Smoke", "[of] " + target);
("-fail", target, "unboost", "accuracy", "[from] ability: Keen Eye", "[of] " + target);

('-ability', pokemon, 'Insomnia', '[from] move: Worry Seed');
('-ability', pokemon, 'Simple', '[from] move: Simple Beam');
('-ability', pokemon, ability, '[from] ability: Trace', '[of] ' + target);
('-ability', pokemon, ability, '[from] ability: Trace', '[of] ' + target);
('-ability', pokemon, ability, '[from] ability: Trace', '[of] ' + target);
('-ability', source, sourceEffect, '[from] ' + this.weather, '[fail]');
('-ability', source, this.getAbility(source.ability).name, '[from] move: Role Play', '[of] ' + target);
('-ability', target, this.getAbility(target.ability).name, '[from] move: Entrainment');
('-ability', this.effectData.target, ability, '[from] ability: Power of Alchemy', '[of] ' + target);
('-ability', this.effectData.target, ability, '[from] ability: Receiver', '[of] ' + target);


('-activate', pokemon, 'ability: Forewarn', warnMoveName, '[of] ' + warnTarget);
('-activate', pokemon, 'item: Custap Berry', '[consumed]');
('-activate', pokemon, 'item: Leppa Berry', moveSlot.move, '[consumed]');
('-activate', pokemon, 'move: ' + this.effectData.sourceEffect, '[of] ' + source);
('-activate', pokemon, 'move: Attract', '[of] ' + this.effectData.source);
('-activate', pokemon, 'move: Beat Up', '[of] ' + move.allies[0].name);
('-activate', pokemon, 'move: Beat Up', '[of] ' + move.allies[0].name);
('-activate', snatchUser, 'move: Snatch', '[of] ' + source);
('-activate', source, 'Substitute', '[damage]');
('-activate', source, 'ability: Symbiosis', myItem, '[of] ' + pokemon);
('-activate', source, 'move: Guard Split', '[of] ' + target);
('-activate', source, 'move: Lock-On', '[of] ' + target);
('-activate', source, 'move: Mind Reader', '[of] ' + target);
('-activate', source, 'move: Power Split', '[of] ' + target);
('-activate', source, 'move: Skill Swap', '', '', '[of] ' + target);
('-activate', source, 'move: Skill Swap', targetAbility, sourceAbility, '[of] ' + target);
('-activate', source, 'move: Skill Swap', this.getAbility(targetAbility), this.getAbility(sourceAbility), '[of] ' + target);
('-activate', source, 'move: Speed Swap', '[of] ' + target);
('-activate', source, 'move: Trick', '[of] ' + target);
('-activate', source, 'move: Trick', '[of] ' + target);
('-activate', target, 'Substitute', '[block] ' + move.name);
('-activate', target, 'Substitute', '[block] ' + move.name);
('-activate', target, 'Substitute', '[damage]');
('-activate', target, 'Substitute', '[damage]');
('-activate', target, 'Substitute', '[damage]');
('-activate', target, 'Substitute', '[damage]');
('-activate', target, 'Substitute', '[damage]');
('-activate', target, 'ability: Mummy', this.getAbility(oldAbility).name, '[of] ' + source);
('-activate', target, 'move: ' + effect, '[of] ' + source);
('-activate', target, 'move: ' + move.name, '[broken]');
('-activate', target, 'move: Substitute', '[damage]');
('-activate', this.effectData.target, 'ability: Aroma Veil', '[of] ' + target);
('-activate', this.effectData.target, 'ability: Flower Veil', '[of] ' + target);
('-activate', this.effectData.target, 'ability: Flower Veil', '[of] ' + target);
('-activate', this.effectData.target, 'ability: Sweet Veil', '[of] ' + target);
('-activate', this.effectData.target, 'ability: Sweet Veil', '[of] ' + target);

('-clearnegativeboost', pokemon, '[silent]');
('-clearnegativeboost', pokemon, '[silent]');
('-clearnegativeboost', pokemon, '[zeffect]');

('-copyboost', source, target, '[from] move: Psych Up');
('-copyboost', source, target, '[from] move: Psych Up');

('-curestatus', pokemon, 'frz', '[from] move: ' + move);
('-curestatus', pokemon, pokemon.status, '[from] ability: Natural Cure');
('-curestatus', pokemon, pokemon.status, '[from] ability: Natural Cure');
('-curestatus', this, this.status, silent ? '[silent]' : '[msg]');

('-cureteam', source, '[from] move: Aromatherapy');
('-cureteam', source, '[from] move: Heal Bell');

('-damage', target, target.getHealth, '[from] ' + name);
('-damage', target, target.getHealth, '[from] ' + name, '[of] ' + source);
('-damage', target, target.getHealth, '[from] ' + this.effectData.sourceEffect.fullname, '[partiallytrapped]');
('-damage', target, target.getHealth, '[from] confusion');
('-damage', target, target.getHealth, '[from] confusion');
('-damage', target, target.getHealth, '[from] recoil');
('-damage', target, target.getHealth, '[silent]');

('-end', pokemon, 'Attract', '[silent]');
('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
('-end', pokemon, 'Slow Start', '[silent]');
('-end', pokemon, 'Telekinesis', '[silent]');
('-end', pokemon, 'move: Attract', '[from] ability: Oblivious');
('-end', pokemon, 'move: Attract', '[from] ability: Oblivious');
('-end', pokemon, 'move: Attract', '[from] item: Mental Herb');
('-end', pokemon, 'move: Attract', '[from] item: Mental Herb');
('-end', pokemon, 'move: Attract', '[from] item: Mental Herb');
('-end', pokemon, 'move: Attract', '[from] item: Mental Herb');
('-end', pokemon, 'move: Bide', '[silent]');
('-end', pokemon, 'move: Bide', '[silent]');
('-end', pokemon, 'move: Bide', '[silent]');
('-end', pokemon, 'move: Bide', '[silent]');
('-end', pokemon, 'move: Laser Focus', '[silent]');
('-end', pokemon, oMegaTemplate.requiredItem || oMegaTemplate.requiredMove, '[silent]');
('-end', pokemon, this.effectData.sourceEffect, '[partiallytrapped]');
('-end', pokemon, this.effectData.sourceEffect, '[partiallytrapped]');
('-end', pokemon, this.effectData.sourceEffect, '[partiallytrapped]', '[silent]');
('-end', pokemon.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
('-end', target, 'Sky Drop', '[interrupt]');
('-end', target, 'Throat Chop', '[silent]');
('-end', target, 'ability: Flash Fire', '[silent]');
('-end', target, 'ability: Flash Fire', '[silent]');
('-end', target, 'move: Taunt', '[silent]');
('-end', target, 'move: Yawn', '[silent]');
('-end', target.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
('-end', this, 'Nightmare', '[silent]');

('-endability', this, this.battle.getAbility(oldAbility), '[from] move: ' +

('-enditem', pokemon, item.name, '[from] move: Incinerate');
('-enditem', pokemon, item.name, '[from] move: Incinerate');
('-enditem', source, 'Bug Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Dark Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Dragon Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Electric Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Fairy Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Fighting Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Fire Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Flying Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Ghost Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Grass Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Ground Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Ice Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Normal Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Poison Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Psychic Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Rock Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Steel Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, 'Water Gem', '[from] gem', '[move] ' + move.name);
('-enditem', source, myItem, '[silent]', '[from] move: Switcheroo');
('-enditem', source, myItem, '[silent]', '[from] move: Trick');
('-enditem', source, yourItem, '[silent]', '[from] ability: Pickpocket', '[of] ' + source);
('-enditem', target, item.name, '[from] move: Knock Off', '[of] ' + source);
('-enditem', target, item.name, '[from] move: Knock Off', '[of] ' + source);
('-enditem', target, item.name, '[from] stealeat', '[move] Bug Bite', '[of] ' + source);
('-enditem', target, item.name, '[from] stealeat', '[move] Pluck', '[of] ' + source);
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, this.effect, '[weaken]');
('-enditem', target, yourItem, '[silent]', '[from] move: Switcheroo');
('-enditem', target, yourItem, '[silent]', '[from] move: Trick');
('-enditem', this, item, '[eat]');
('-enditem', this, item, '[of] ' + source);

('-fail', attacker, move, '[from] Desolate Land');
('-fail', attacker, move, '[from] Primordial Sea');
('-fail', pokemon, 'move: Hyperspace Fury', '[forme]');
('-fail', pokemon, 'slp', '[from] Uproar');
('-fail', pokemon, 'slp', '[from] Uproar', '[msg]');
('-fail', source, sourceEffect, '[from] ' + this.weather);
('-fail', target, 'move: Sky Drop', '[heavy]');
('-fail', target, 'move: Substitute', '[weak]');
('-fail', target, 'move: Substitute', '[weak]');
('-fail', this.effectData.target, 'unboost', '[from] ability: Flower Veil', '[of] ' + target);

('-fieldend', 'move: Magic Room', '[of] ' + this.effectData.source);

('-fieldstart', 'move: Electric Terrain', '[from] ability: ' + effect, '[of] ' + source);
('-fieldstart', 'move: Grassy Terrain', '[from] ability: ' + effect, '[of] ' + source);
('-fieldstart', 'move: Magic Room', '[of] ' + source);
('-fieldstart', 'move: Misty Terrain', '[from] ability: ' + effect, '[of] ' + source);
('-fieldstart', 'move: Misty Terrain', '[from] ability: ' + effect, '[of] ' + source);
('-fieldstart', 'move: Mud Sport', '[of] ' + source);
('-fieldstart', 'move: Psychic Terrain', '[from] ability: ' + effect, '[of] ' + source);
('-fieldstart', 'move: Trick Room', '[of] ' + source);
('-fieldstart', 'move: Water Sport', '[of] ' + source);
('-fieldstart', 'move: Wonder Room', '[of] ' + source);

('-formechange', this, template.species, message, `[from] ability: ${source.name}`);

('-heal', pokemon, pokemon.getHealth, '[silent]');
('-heal', target, target.getHealth, '[from] ' + effect.fullname);
('-heal', target, target.getHealth, '[from] ' + effect.fullname, '[of] ' + source);
('-heal', target, target.getHealth, '[from] drain', '[of] ' + source);
('-heal', target, target.getHealth, '[from] move: ' + this.effectData.sourceEffect, '[zeffect]');
('-heal', target, target.getHealth, '[from] move: Healing Wish');
('-heal', target, target.getHealth, '[from] move: Healing Wish');
('-heal', target, target.getHealth, '[from] move: Lunar Dance');
('-heal', target, target.getHealth, '[from] move: Lunar Dance');
('-heal', target, target.getHealth, '[from] move: Wish', '[wisher] ' + source.name);
('-heal', target, target.getHealth, '[from] move: Wish', '[wisher] ' + this.effectData.source.name);
('-heal', target, target.getHealth, '[silent]');
('-heal', target, target.getHealth, '[zeffect]');

('-immune', pokemon, '[from] Oblivious');
('-immune', pokemon, '[from] ability: Bulletproof');
('-immune', pokemon, '[from] ability: Oblivious');
('-immune', pokemon, '[from] ability: Sturdy');
('-immune', target, '[from] ability: Comatose');
('-immune', target, '[from] ability: Dry Skin');
('-immune', target, '[from] ability: Flash Fire');
('-immune', target, '[from] ability: Flash Fire');
('-immune', target, '[from] ability: Flash Fire');
('-immune', target, '[from] ability: Immunity');
('-immune', target, '[from] ability: Insomnia');
('-immune', target, '[from] ability: Leaf Guard');
('-immune', target, '[from] ability: Leaf Guard');
('-immune', target, '[from] ability: Lightning Rod');
('-immune', target, '[from] ability: Limber');
('-immune', target, '[from] ability: Motor Drive');
('-immune', target, '[from] ability: Mountaineer');
('-immune', target, '[from] ability: Overcoat');
('-immune', target, '[from] ability: Sap Sipper');
('-immune', target, '[from] ability: Shields Down');
('-immune', target, '[from] ability: Shields Down');
('-immune', target, '[from] ability: Soundproof');
('-immune', target, '[from] ability: Storm Drain');
('-immune', target, '[from] ability: Vital Spirit');
('-immune', target, '[from] ability: Volt Absorb');
('-immune', target, '[from] ability: Volt Absorb');
('-immune', target, '[from] ability: Water Absorb');
('-immune', target, '[from] ability: Water Bubble');
('-immune', target, '[from] ability: Water Veil');
('-immune', target, '[from] ability: Wonder Guard');
('-immune', target, '[ohko]');
('-immune', target, '[ohko]');
('-immune', target, '[ohko]');
('-immune', target, '[ohko]');
('-immune', target, '[ohko]');
('-immune', target, 'confusion', '[from] ability: Own Tempo');
('-immune', this, '[from] ability: Levitate');
('-immune', this.effectData.target, '[from] ability: Soundproof');

('-invertboost', target, '[from] move: Topsy-Turvy');

('-item', pokemon, pokemon.getItem(), '[from] ability: Harvest');
('-item', pokemon, this.getItem(item), '[from] ability: Pickup');
('-item', pokemon, this.getItem(item), '[from] move: Recycle');
('-item', source, yourItem, '[from] ability: Magician', '[of] ' + target);
('-item', source, yourItem, '[from] move: Covet', '[of] ' + target);
('-item', source, yourItem, '[from] move: Switcheroo');
('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);
('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);
('-item', source, yourItem, '[from] move: Trick');
('-item', target, myItem, '[from] move: Switcheroo');
('-item', target, myItem, '[from] move: Trick');
('-item', target, myItem.name, '[from] move: Bestow', '[of] ' + source);
('-item', target, target.getItem().name, '[from] ability: Frisk', '[of] ' + pokemon);
('-item', target, target.getItem().name, '[from] ability: Frisk', '[of] ' + pokemon, '[identify]');
('-item', target, yourItem, '[from] ability: Pickpocket', '[of] ' + source);

('-setboost', target, 'atk', 12, '[from] ability: Anger Point');
('-setboost', target, 'atk', 12, '[from] ability: Anger Point');
('-setboost', target, 'atk', target.boosts['atk'], '[from] move: Belly Drum');

('-sethp', pokemon, pokemon.getHealth, '[from] move: Pain Split');
('-sethp', target, target.getHealth, '[from] move: Pain Split', '[silent]');

('-sideend', pokemon.side, 'move: Toxic Spikes', '[of] ' + pokemon);
('-sideend', pokemon.side, 'move: Toxic Spikes', '[of] ' + pokemon);
('-sideend', pokemon.side, this.getEffect(condition).name, '[from] move: Defog', '[of] ' + pokemon);
('-sideend', pokemon.side, this.getEffect(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
('-sideend', pokemon.side, this.getEffect(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
('-sideend', source.side, this.getEffect(sideCondition).name, '[from] move: Defog', '[of] ' + source);
('-sideend', target.side, this.getEffect(targetCondition).name, '[from] move: Defog', '[of] ' + source);

('-singleturn', target, 'Helping Hand', '[of] ' + source);
('-singleturn', target, 'Helping Hand', '[of] ' + source);
('-singleturn', target, 'move: Follow Me', '[zeffect]');
('-singleturn', target, 'move: Instruct', '[of] ' + source);

('-start', pokemon, 'Attract', '[from] ability: Cute Charm', '[of] ' + source);
('-start', pokemon, 'Attract', '[from] item: Destiny Knot', '[of] ' + source);
('-start', pokemon, 'Curse', '[of] ' + source);
('-start', pokemon, 'Curse', '[of] ' + source);
('-start', pokemon, 'Disable', moveSlot.move, '[from] ability: Cursed Body', '[of] ' + source);
('-start', pokemon, 'move: Laser Focus', '[silent]');
('-start', pokemon, 'perish3', '[silent]');
('-start', pokemon, 'typeadd', pokemon.addedType, '[silent]');
('-start', pokemon, 'typechange', pokemon.template.types.join('/'), '[silent]');
('-start', pokemon, 'typechange', pokemon.types.join('/'), '[from] move: Burn Up');
('-start', pokemon, 'typechange', pokemon.types.join('/'), '[silent]');
('-start', pokemon, 'typechange', pokemon.types.join('/'), '[silent]');
('-start', pokemon, 'typechange', realTypeString, '[silent]');
('-start', pokemon, oMegaTemplate.requiredItem || oMegaTemplate.requiredMove, '[silent]');
('-start', source, 'typechange', '[from] move: Reflect Type', '[of] ' + target);
('-start', source, 'typechange', source.types.join(', '), '[from] move: Conversion', '[of] ' + source);
('-start', source, 'typechange', type, '[from] ability: Protean');
('-start', target, 'Throat Chop', '[silent]');
('-start', target, 'Uproar', '[upkeep]');
('-start', target, 'confusion', '[fatigue]');
('-start', target, 'confusion', '[silent]');
('-start', target, 'confusion', '[silent]');
('-start', target, 'move: Focus Energy', '[silent]');
('-start', target, 'move: Focus Energy', '[zeffect]');
('-start', target, 'move: Yawn', '[of] ' + source);
('-start', target, 'typeadd', 'Ghost', '[from] move: Trick-or-Treat');
('-start', target, 'typeadd', 'Grass', '[from] move: Forest\'s Curse');
('-start', target, 'typechange', type, '[from] ability: Color Change');
('-start', target, 'typechange', type, '[from] ability: Color Change');

('-status', pokemon, 'psn', '[silent]');
('-status', target, 'brn', '[from] ability: ' + sourceEffect.name, '[of] ' + source);
('-status', target, 'brn', '[from] item: Flame Orb');
('-status', target, 'frz', '[from] ability: ' + sourceEffect.name, '[of] ' + source);
('-status', target, 'par', '[from] ability: ' + sourceEffect.name, '[of] ' + source);
('-status', target, 'psn', '[from] ability: ' + sourceEffect.name, '[of] ' + source);
('-status', target, 'slp', '[from] ability: ' + sourceEffect.name, '[of] ' + source);
('-status', target, 'slp', '[from] move: ' + sourceEffect.name);
('-status', target, 'slp', '[from] move: ' + sourceEffect.name);
('-status', target, 'slp', '[from] move: ' + sourceEffect.name);
('-status', target, 'slp', '[from] move: ' + sourceEffect.name);
('-status', target, 'slp', '[from] move: ' + sourceEffect.name);
('-status', target, 'slp', '[from] move: ' + sourceEffect.name);
('-status', target, 'slp', '[from] move: Rest');
('-status', target, 'tox', '[from] ability: ' + sourceEffect.name, '[of] ' + source);
('-status', target, 'tox', '[from] item: Toxic Orb');

('-swapboost', source, target, '[from] move: Heart Swap');
('-swapboost', source, target, 'atk, spa', '[from] move: Power Swap');
('-swapboost', source, target, 'def, spd', '[from] move: Guard Swap');

('-transform', this, pokemon, '[from] ' + effect.fullname);

('-weather', 'DeltaStream', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'DeltaStream', '[upkeep]');
('-weather', 'DesolateLand', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'DesolateLand', '[upkeep]');
('-weather', 'Hail', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'Hail', '[upkeep]');
('-weather', 'PrimordialSea', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'PrimordialSea', '[upkeep]');
('-weather', 'RainDance', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'RainDance', '[upkeep]');
('-weather', 'Sandstorm', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'Sandstorm', '[upkeep]');
('-weather', 'SunnyDay', '[from] ability: ' + effect, '[of] ' + source);
('-weather', 'SunnyDay', '[upkeep]');

('cant', this.effectData.target, 'ability: Damp', effect, '[of] ' + target);
('cant', this.effectData.target, 'ability: Dazzling', effect, '[of] ' + target);
('cant', this.effectData.target, 'ability: Queenly Majesty', effect, '[of] ' + target);

(msg, target, boostName, boostBy, '[silent]');
(msg, target, boostName, boostBy, '[zeffect]');
(msg, target, i, boost[i], '[from] ' + effect.fullname);

(pokemon.side.id, ['-ability', pokemon, 'Pressure', '[silent]']);
