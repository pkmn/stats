#!/usr/bin/env node
'use strict';

try {
  require.resolve('minimist');
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
  require('child_process').execSync(`npm install minimist --no-audit --no-save `, {
    stdio: 'inherit',
    cwd: __dirname,
  });
  console.error('Please rerun now that dependencies have been resolved.');
  process.exit(1);
}

try {
  require('source-map-support').install();
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
}

const https = require('https');
const url = require('url');
const minimist = require('minimist');

const argv = minimist(process.argv.slice(2), {
  alias: {
    formats: ['f', 'format'],
    begin: ['b', 'start'],
    end: ['e', 'finish'],
    total: ['t'],
    max: ['m'],
  }
});

const fetch = u => {
  return new Promise((resolve, reject) => {
    let data = '';
    const req = https.get(u, res => {
      if (res.statusCode !== 200) {
        if (res.statusCode >= 300 && res.statusCode <= 400 && res.headers.location) {
          return resolve(fetch(url.resolve(u, res.headers.location)));
        } else {
          return reject(new Error(`HTTP ${res.statusCode}`));
        }
      }
      res.on('data', d => {
        data += d;
      });
      res.on('end', () => resolve(data));
    });
    req.on('error', reject);
    req.end();
  });
};

const month = (d = new Date()) =>
  `${d.getUTCFullYear()}-${`${d.getUTCMonth() + 1}`.padStart(2, '0')}`;

(async () => {
  if (!(argv.formats && argv._.length === 1) ){
    console.error('usage: sample TOTAL --formats=FORMATS [--begin=BEGIN] [--end=END] [--max=N]');
    process.exit(1);
  }

  const total = Number(argv._[0]);
  const formats = argv.formats.split(',');
  const max = argv.max ? Number(argv.max) : 1;
  const begin = new Date(month(argv.begin ? new Date(argv.begin) : new Date('2017-10')));
  const end = new Date(month(argv.end ? new Date(argv.end) : undefined));

  let sum = 0;
  const counts = {};
  for (const d = begin; d < end; d.setUTCMonth(d.getUTCMonth() + 1)) {
    for (const format of formats) {
      const usage = await fetch(`https://www.smogon.com/stats/${month(d)}/${format}-0.txt`);
      const m = usage.match(/^ Total battles: (.*)/);
      const n = Number(m[1]);
      counts[format] = (counts[format] || 0) + n;
      sum += n;
    }
  }

  const flag = [];
  for (const format of formats) {
    const rate = Math.min((counts[format] * total) / (sum * sum), max);
    flag.push(`${format}:${rate}`);
  }
  console.log(`--formats=${flag.join(',')}`);
})();
