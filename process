#!/usr/bin/env node

// Produces the standard Smogon reports in an output directory specified by
// its second argument based on data from a logs directory provided by its
// first argument.
//
// Expects the logs (YYYY-MM) directory to be structured as follows:
//
//     YYYY-MM
//     └── format
//         └── YYYY-MM-DD
//             └── battle-format-N.log.json
//
// The resulting reports will be written out in the following directory structure:
//
//     YYYY-MM
//     ├── chaos
//     │   └── format-N.json
//     ├── format-N.txt
//     ├── leads
//     │   └── format-N.txt
//     ├── metagame
//     │   └── format-N.txt
//     ├── monotype
//     │   ├── chaos
//     │   │   └── format-monoT-N.json
//     │   ├── format-monoT-N.txt
//     │   ├── leads
//     │   │   └── format-monoT-N.txt
//     │   ├── metagame
//     │   │   └── format-monoT-N.txt
//     │   └── moveset
//     │       └── format-monoT-N.txt
//     └── moveset
//         └── format-N.txt
//
// Makes use of an internal checkpoints directory which is structured as follows:
//
//     <checkpoints>
//     └── format
//         └── YYYYMMDD_N_i-YYYYMMDD-M_j.json.gz
//
// By default, <checkpoints> is a temp directory, but may be specified with a flag.
//
// Usage:
//
//   $ ./process ../Pokemon-Showdown{logs,Stats}/2019-05

require('source-map-support').install();
const stats = require('./build/index');
const child_process = require('child_process');
const path = require('path');
const shell = cmd => child_process.execSync(cmd, {stdio: 'inherit', cwd: __dirname});

function missing(dep) {
  try {
    require.resolve(dep);
    return false;
  } catch (err) {
    if (err.code !== 'MODULE_NOT_FOUND') throw err;
    return true;
  }
}

function usage(code) {
  const out = !code ? console.log : console.error;
  out('process path/to/logs path/to/output/reports');
  out('');
  out(' Produces the standard Smogon reports in an output directory specified by the');
  out(' second argument based on data from a logs directory provided by the first argument.');
  out('');
  out(' Options:');
  out('');
  out('   -i/--input=PATH: process logs found under PATH');
  out('');
  out('   -o/--output=PATH: output reports to PATH');
  out('');
  out('   -c/--checkpoint=PATH: enable checkpointing and write intermediate files to PATH for recovery');
  out('');
  out('   -p/--numWorkers=N: process the logs using N workers (default: NUM_CORES-1)');
  out('');
  out('   -n/--maxFiles=N: open up to N files across all workers (should be < `ulimit -n`, default: 256)');
  out('');
  out('   -b/--batchSize=N: if checkpointing, write checkpoints at least every N files per format (default: 8096)');
  out('');
  out('   -d/--dryRun: skip actually performing any processing (default: false)');
  out('');
  out('   -v/--verbose: log output while processing (default: false)');
  out('');
  out('   -a/--all: include all checks and counters in moveset reports (default: false)');
  out('');
  out ('NOTE: A negative value can be used to disable specific default sizes/limits.');
  process.exit(code);
}

if (process.argv.length < 3) usage(1);
if (['help', '-help', '--help', 'h', '-h', '--help', '?', '-?', '--?'].includes(process.argv[2])) usage(0);
if (missing('minimist')) shell('npm install minimist');
const argv = require('minimist')(process.argv.slice(2), {
  alias: {
    logs: ['i', 'in', 'input', 'l', 'logs', 'src'],
    reports: ['o', 'out', 'output', 'r', 'dest'],
    checkpoints: ['c', 'checkpoint'],
    numWorkers: ['p', 'parallel', 'workers', 'maxWorkers', 't', 'threads'],
    maxFiles: ['n', 'm', 'numFiles', 'files', 'maxOpenFiles'],
    batchSize: ['b', 'perBatch', 'maxBatch', 'maxBatchSize'],
    debug: ['v', 'verbose'],
    dryRun: ['d', 'dry'],
    all: ['a'],
  }
});
if (argv._.length) {
  argv.logs = argv._[0];
  if (argv._.length > 1) argv.reports = argv._[1];
}
if (argv._.length > 2 || !argv.logs || !argv.reports) usage(1);
if (argv.debug) process.env.DEBUG = +argv.verbose;

argv.worker = 'stats';

// tslint:disable-next-line: no-floating-promises
(async () => process.exit(await stats.process(argv)))();
