#!/usr/bin/env node

// Produces the standard Smogon reports in an output directory specified by
// its second argument based on data from a logs directory provided by its
// first argument.
//
// Expects the logs (YYYY-MM) directory to be structured as follows:
//
//     YYYY-MM
//     └── format
//         └── YYYY-MM-DD
//             └── battle-format-N.log.json
//
// The resulting reports will be written out in the following directory structure:
//
//     YYYY-MM
//     ├── chaos
//     │   └── format-N.json
//     ├── format-N.txt
//     ├── leads
//     │   └── format-N.txt
//     ├── metagame
//     │   └── format-N.txt
//     ├── monotype
//     │   ├── chaos
//     │   │   └── format-monoT-N.json
//     │   ├── format-monoT-N.txt
//     │   ├── leads
//     │   │   └── format-monoT-N.txt
//     │   ├── metagame
//     │   │   └── format-monoT-N.txt
//     │   └── moveset
//     │       └── format-monoT-N.txt
//     └── moveset
//         └── format-N.txt
//
// Usage:
//
//   $ ./process ../Pokemon-Showdown{logs,Stats}/2019-05

require('source-map-support').install();
const stats = require('./build/index');
const child_process = require('child_process');
const path = require('path');
const shell = cmd => child_process.execSync(cmd, {stdio: 'inherit', cwd: __dirname});

function missing(dep) {
  try {
    require.resolve(dep);
    return false;
  } catch (err) {
    if (err.code !== 'MODULE_NOT_FOUND') throw err;
    return true;
  }
}

function usage(code) {
  const out = !code ? console.log : console.error;
  out('process path/to/logs path/to/output/reports');
  out('');
  out(' Produces the standard Smogon reports in an output directory specified by the');
  out(' second argument based on data from a logs directory provided by the first argument.')
  out('');
  out(' Options:');
  out('');
  out('   --numWorkers=N: process the logs using N worker processes (default: NUM_CORES-1)');
  out('');
  out('   --maxFiles=N: only open up to N files (should be `ulimit -n`, default: 256)');
  out('');
  out('   --debug: whether or not run in in "debug" mode (default: false)');
  out('');
  process.exit(code);
}

if (process.argv.length < 3) usage(1);
if (['help', '-help', '--help', 'h', '-h', '--help', '?', '-?', '--?'].includes(process.argv[2])) usage(0);
if (missing('minimist')) shell('npm install minimist');
const argv = require('minimist')(process.argv.slice(2), {
  alias: {
    numWorkers: ['n', 'workers', 'maxWorkers', 'processes', 'maxProcesses', 'numProcesses'],
    maxFiles: ['N', 'files', 'numFiles'],
  },
  unknown: (arg) => {
    if (!arg.startsWith('-')) return true;
    console.error(`Unexpected argument '${arg}'\n`);
    usage(1);
  }
});
if (argv._.length !== 2) usage(1);

// tslint:disable-next-line: no-floating-promises
(async () => process.exit(await stats.process(argv._[0], argv._[1], argv)))();
