#!/usr/bin/env node
'use strict';

try {
  require('source-map-support').install();
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
}

const fs = require('fs');

const {Generations} = require('@pkmn/data');
const {Dex} = require('@pkmn/dex');
const {Lookup} = require('@pkmn/engine');
const {Binary} = require('@pkmn/stats');
const stringify = require('json-stringify-pretty-compact');
const minimist = require('minimist');
const {Log, Sizes, Stats, Display} = Binary;

const ptile = (arr, p) => {
  if (!arr.length) return 0;
  if (p <= 0) return arr[0];
  if (p >= 1) return arr[arr.length - 1];

  const index = (arr.length - 1) * p;
  const lower = Math.floor(index);
  const upper = lower + 1;
  const weight = index % 1;

  if (upper >= arr.length) return arr[lower];
  return arr[lower] * (1 - weight) + arr[upper] * weight;
};

const round = (v, p = 1e4) => Math.round(v * p);

const exit = msg => {
  if (msg) console.error(msg);
  console.error('Usage: stats <compute|display|sizes|cutoff> ...');
  process.exit(1);
};

if (process.argv.length < 3) exit();
const cmd = process.argv[2];
const argv = minimist(process.argv.slice(3));

if (!argv.gen) exit('No --gen provided');
const gens = new Generations(Dex);
const gen = gens.get(argv.gen);
if (gen.num >= 3) exit(`Unsupported gen ${gen.num}`); // TODO
const lookup = Lookup.get(gen);

argv.moves = argv.moves || (gen.num === 1 ? 15 : 20);
argv.items = argv.items || 5;

switch (cmd) {
  case 'display': {
  // display --gen=1 --stats=stats.db --report=<pokemon|teammates>
    if (!argv.stats || !fs.existsSync(argv.stats)) {
      exit(argv.stats ? `Invalid stats.db ${argv.stats}` : '--stats not provided');
    }

    switch (argv.report) {
      case 'pokemon': {
        console.log(stringify(Display.pokemon(gen, lookup, fs.readFileSync(argv.stats), argv)));
        break;
      }
      case 'teammates': {
        // TODO
        break;
      }
      default: exit(`Unknown report type ${argv.report || ''}`);
    }
    break;
  }
  case 'cutoff': {
  // cutoff --gen=1 -logs=logs.db --percentile=0.5
    if (!argv.percentile || argv.percentile < 0 || argv.percentile > 100) {
      exit(argv.percentile ? `Invalid percentile ${argv.percentile}` : 'No --percentile provided');
    } else if (!argv.logs || !fs.existsSync(argv.logs)) {
      exit(argv.logs ? `Invalid logs.db ${argv.logs}` : '--logs not provided');
    }

    const N = 6 * Sizes[gen.num];
    const row = 17 + 2 * N;
    const db = fs.readFileSync(argv.logs);
    if (db.length % row !== 0) exit(`Corrupted logs.db of size ${db.length} (${row})`);

    const ratings = [];
    for (let offset = 0; offset < db.length; offset += row) {
      const data = Log.decode(gen, lookup, db, offset);
      for (const player of [data.winner, data.loser]) {
        if (player.rating) ratings.push(player.rating.rpr);
      }
    }

    console.log(ptile(ratings.sort(), argv.percentile));
    break;
  }
  case 'sizes': {
  // sizes --gen=1 --logs=logs.db --cutoff=1500
    if (!argv.cutoff || argv.cutoff < 1000) {
      exit(argv.cutoff ? `Invalid cutoff ${argv.cutoff}` : 'No --cutoff provided');
    } else if (!argv.logs || !fs.existsSync(argv.logs)) {
      exit(argv.logs ? `Invalid logs.db ${argv.logs}` : '--logs not provided');
    }

    const stats = Stats.compute(gen, lookup, fs.readFileSync(argv.logs), argv);

    const sizes = {moves: [], items: []};
    for (let i = 0; i < stats.species.length; i++) {
      let move = 0;
      for (const weight of Object.values(stats.move_species[i])) {
        if (round(weight / stats.species[i]) > 100) move++;
      }
      sizes.moves.push(move);

      if (gen.num >= 2) {
        let item = 0;
        for (const weight of Object.values(stats.item_species[i])) {
          if (round(weight / stats.species[i]) > 100) item++;
        }
        sizes.items.push(item);
      }
    }

    sizes.moves.sort((a, b) => a - b);
    sizes.items.sort((a, b) => a - b);
    for (let i = 0; i < 101; i++) {
      let msg = `${i}%: ${ptile(sizes.moves, i / 100)}`;
      if (gen.num >= 2) msg = `${msg} ${ptile(sizes.items, i / 100)}`;
      console.log(msg);
    }
    break;
  }
  case 'compute': {
  // compute --gen=1 --logs=logs.db --cutoff=1500 --moves=10 --items=5
    if (!argv.cutoff || argv.cutoff < 1000) {
      exit(argv.cutoff ? `Invalid cutoff ${argv.cutoff}` : 'No --cutoff provided');
    } else if (!argv.logs || !fs.existsSync(argv.logs)) {
      exit(argv.logs ? `Invalid logs.db ${argv.logs}` : '--logs not provided');
    }

    const stats = Stats.compute(gen, lookup, fs.readFileSync(argv.logs), argv);
    process.stdout.write(Stats.encode(gen, lookup, stats, argv));
    break;
  }
  default: exit(`Unknown command: ${cmd}`);
}
